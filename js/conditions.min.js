/*
  ConditionsAdd
  Version: 1.0
  
  Albert Cansado Sola
  @albertcansado
*/

(function(root, factory) {
    if (typeof define === 'function' && define.amd) {
        define([], factory);
    } else if (typeof module === 'object' && module.exports) {
        module.exports = factory();
    } else {
        // @TODO rename it
        root.Memory = factory();
    }
}(this, function() {

    'use strict';

    /**
     * A simple forEach() implementation for Arrays, Objects and NodeLists
     * @private
     * @param {Array|Object|NodeList} collection Collection of items to iterate
     * @param {Function} callback Callback function for each iteration
     * @param {Array|Object|NodeList} scope Object/NodeList/Array that forEach is iterating over (aka `this`)
     */
    var forEach = function(collection, callback, scope) {
        if (Object.prototype.toString.call(collection) === '[object Object]') {
            for (var prop in collection) {
                if (Object.prototype.hasOwnProperty.call(collection, prop)) {
                    callback.call(scope, collection[prop], prop, collection);
                }
            }
        } else {
            for (var i = 0, len = collection.length; i < len; i++) {
                callback.call(scope, collection[i], i, collection);
            }
        }
    };

    /**
     * Merge defaults with user options
     * @private
     * @param {Object} defaults Default settings
     * @param {Object} options User options
     * @returns {Object} Merged values of defaults and options
     */
    var extend = function(defaults, options) {
        var extended = {};
        forEach(defaults, function(value, prop) {
            extended[prop] = defaults[prop];
        });
        forEach(options, function(value, prop) {
            extended[prop] = options[prop];
        });
        return extended;
    };

    var index = function (obj, is, value) {
        if (utils.isString(is))
            return index(obj, is.split('.'), value);
        else if (is.length === 1 && !utils.isUndefined(value))
            return (isArray(obj[is[0]])) ? obj[is[0]].push(value) : obj[is[0]] = value;
        else if (is.length === 0)
            return obj;
        else
            return index(obj[is[0]], is.slice(1), value);
    };

    var isObject = function(obj) {
        var type = typeof obj;
        return type === 'function' || type === 'object' && !!obj;
    };

    var isArray = function(foo) {
        return Array.isArray(foo);
    };

    var DB = [];

    var _defaults = {
        id: 'id'
    };

    var Plugin = function(data) {
        if (isArray(data)) {
            DB = data;
        }
    };

    Plugin.prototype.isEmpty = function() {
        return DB.length === 0;
    };

    Plugin.prototype.find = function(key) {
        var isObj = isObject(key);
        for (var r in DB) {
            var row = DB[r];
            if (
                (isObj && key == row) ||
                (row.hasOwnProperty('id') && row.id == key)
            ) {
                return row;
            }
        }

        return null;
    };

    Plugin.prototype.insert = function(obj) {
        DB.push(obj);
        return true;
    };

    Plugin.prototype.dump = function() {
        return DB;
    };

    Plugin.prototype.update = function(key, prop, value) {
        var kIsObj = isObject(key);
        var pIsObj = isObject(prop);
        var hasUpdated = false;
        for (var r in DB) {
            var row = DB[r];
            var itsFound = (
                (kIsObj && key === row) ||
                (row.hasOwnProperty('id') && row.id == key)
            );

            if (itsFound) {
                hasUpdated = true;
                if (pIsObj) {
                    DB[r] = prop;
                    //} else if (row.hasOwnProperty(prop)) {
                    //  DB[r][prop] = value;
                } else {
                    index(DB[r], prop, value);
                    //DB[r][prop] = value;
                    //hasUpdated = false;
                }
                break;
            }
        }

        return hasUpdated;
    };

    Plugin.prototype.remove = function(key) {
        var isObj = isObject(key);
        var index = -1;
        for (var r in DB) {
            var row = DB[r];
            if (
                (isObj && key === row) ||
                (row.hasOwnProperty('id') && row.id == key)
            ) {
                index = r;
                break;
            }
        }

        if (index > -1) {
            DB.splice(index, 1);
        }

        return true;
    };

    Plugin.prototype.each = function(callback) {
        if (typeof callback !== 'function') {
            console.error('callback must be a function');
            return;
        }
        
        var i, length;
        for (i = 0, length = DB.length; i < length; i++) {
            callback(DB[i], i);
        }
    };

    return Plugin;
}));

(function (root, factory) {
    if (typeof define === 'function' && define.amd) {
        define(['utils', 'Memory'], factory);
    } else if (typeof module === 'object' && module.exports) {
        module.exports = factory(require('utils'), require('Memory'));
    } else {
        root.Conditions = factory(root.utils, root.Memory);
    }
}(this, function (utils, memory) {

    'use strict';
  
    var index = function(obj, is, value) {
        if (typeof is == 'string')
            return index(obj, is.split('.'), value);
        else if (is.length === 1 && value !== undefined)
            return (utils.isArray(obj[is[0]])) ? obj[is[0]].push(value) : obj[is[0]] = value;
        else if (is.length === 0)
            return obj;
        else
            return index(obj[is[0]], is.slice(1), value);
    };

    var _defaults = {};
    
    var _init = function _init(plugin) {
        plugin._config('btn', plugin.el.querySelector('.js-add'));
        plugin._config('content', plugin.el.querySelector('.fd-cond__items'));
        plugin._config('input', plugin.el.querySelector('.fd-cond-textarea'));

        // Templates
        plugin._config('templateRow', plugin.el.querySelector('[data-template="row"]'));
        plugin._config('templateForm', plugin.el.querySelector('[data-template="form"]'));

        // Data...
        var inputData = utils.value(plugin._config('input'));
        plugin._data = new Memory(!utils.isEmpty(inputData) ? JSON.parse(inputData) : []);

        // Add Rows
        if (plugin._data.isEmpty()) {
            plugin.addRow();
        } else {
            plugin._data.each(function (record) {
                plugin.addRow(record);
            });
        }

        // Uploader
        if (plupload) {
            plugin.uploader = new plupload.Uploader({
                browse_button: 'browse', // this can be an id of a DOM element or the DOM element itself
                url: plugin._config('uploader.url'),
                multipart_params: {
                    item_id: plugin._config('uploader.id'),
                    m: plugin._config('uploader.module')
                }
            });

            plugin.uploader.bind('FileUploaded', function(up, file, response) {
                var data = JSON.parse(response.response);
                if (data.status === 'ok') {
                    plugin._data.update(data.data.row, 'image', data.data.filename);
                } else {
                    alert(data.data.msg);
                }
            });

            plugin.uploader.bind('BeforeUpload', function (up, file) {
                up.settings.multipart_params.row = plugin.currentRow;
            });

            plugin.uploader.init();
        }

    };

    var _eventHandler = function _eventHandler(plugin) {
        utils.on(plugin._config('btn'), 'click', function (ev) {
            ev.preventDefault();
            plugin.addRow();
        });

        var form = utils.getParent(plugin.el, 'form');
        if (form) {
            utils.on(form, 'submit', function (ev) {
                utils.value(
                    plugin._config('input'),
                    JSON.stringify(plugin._data.dump())
                );
            });
        }
    };

    /**
     * <li class="fd-cond__item cf {{class}}" {{attr}}>
     *  {{content}}
     * </li>
     */
    var lineTemplate = function (content, options) {
        var options = options || {};
        var el = document.createElement('li');
        
        el.className = 'fd-cond__item cf';
        if (options.class) {
            utils.addClass(el, options.class);
            delete options['class'];
        }

        for (var p in options) {
            el.setAttribute(p, options[p]);
        }

        utils.insert(el, content);

        return el;
    };

    var resetNums = function (elem) {
        utils.foreach(elem.children, function (el, index) {
            el.setAttribute('data-num', index);
        });
    };

    var Plugin = function (el, options) {
        this.el = el;
        this.options = utils.extend(_defaults, options || {});

        _init(this);
        _eventHandler(this);
    };
    
    Plugin.prototype._config = function (key, value) {
        return index(this.options, key, value);
    };

    Plugin.prototype._updateCondition = function(field, key, value) {
        // Get id
        var id = utils.getParent(field, 'li').getAttribute('data-id');

        // Get num
        var num = utils.getParent(field, '.fd-cond__form').getAttribute('data-num');

        // Get Data
        var data = this._data.find(id);

        // Update or insert Conditions
        if (utils.isUndefined(data['conditions'][num])) {
            data['conditions'][num] = {}
        }
        data['conditions'][num][key] = value;
        
        // Update
        //this._data.update(id, data);
    };

    Plugin.prototype._removeCondition = function(el, num) {
        // Get id
        var id = utils.getParent(el, 'li').getAttribute('data-id');

        // Get num
        var num = (!utils.isUndefined(num)) ? num : utils.getParent(el, '.fd-cond__form').getAttribute('data-num');

        // Get Data
        var data = this._data.find(id);

        if (!utils.isUndefined(data['conditions'][num])) {
            data['conditions'].splice(num, 1);
        }

        //this._data.update(id, data);
    };

    Plugin.prototype.addRow = function(record) {
        var record = record || {};
        
        // Attach HTML
        var content = this._config('templateRow').cloneNode(true);        

        // Get line
        var id = (!utils.isEmpty(record)) ? record.id : utils.uuid();
        var li = lineTemplate(content.innerHTML, {
            'data-id': id
        });

        // Add line
        utils.insert(
            this._config('content'),
            li
        );

        // Attach form
        var inner = li.querySelector('.fd-cond__form-inner');
        if (!utils.isEmpty(record)) {
            for (var i = 0, l = record.conditions.length; i < l; i++) {
                this.addFormLine(inner, record.conditions[i]);
            }

            // Actual Image
            var text = document.createElement('span');
            utils.insert(text, 'Actual: ' + record.image);
            utils.insert(
                li.querySelector('.fd-cond__col--upl'),
                text
            );

        } else {
            this.addFormLine(inner);

            // Add to data
            this._data.insert({
                id: id,
                conditions: [],
                image: ''
            });
        }

        // Attach Events
        var _this = this;
        utils.on(li.querySelector('.js-addrow'), 'click', function (ev) {
            // Add new condition line
            ev.preventDefault();
            _this.addFormLine(ev.target.previousElementSibling);
        });

        li.querySelector('[name="image"]').onchange = function (ev) {
            _this.uploader.addFile(ev.target.files[0]);
            _this.currentRow = id;
            _this.uploader.start();
        };

        utils.on(li.querySelector('.fd-cond__delete--row'), 'click', function (ev) {
            // Remove row (li)
            ev.preventDefault();
            _this.deleteRow(li);
        });
    };

    Plugin.prototype.addFormLine = function(el, record) {
        var record = record || {};
        
        var form = this._config('templateForm').cloneNode(true);
        form.className = 'fd-cond__form cf';
        form.removeAttribute('data-template');
        form.setAttribute('data-num', el.children.length);

        if (!utils.isEmpty(record)) {
            utils.prop(
                form.querySelector('[name="field"] [value="' + record.field + '"]'),
                'selected'
            );

            utils.prop(
                form.querySelector('[name="rule"] [value="' + record.rule + '"]'),
                'selected'
            );

            utils.value(
                form.querySelector('[name="value"]'),
                record.value
            );
        }
        
        utils.insert(el, form);

        // Events
        var _this = this;
        form.querySelector('.fd-cond__delete--form').onclick = function (ev) {
            ev.preventDefault();
            _this.removeFormLine(form);
        };

        utils.foreach(form.querySelectorAll('select'), function (item) {
            item.onclick = function (ev) {
                var select = utils.getParent(ev.target, 'select');
                _this._updateCondition(select, select.name, ev.target.value);
            };
        });

        form.querySelector('input[type="text"]').onblur = function (ev) {
            _this._updateCondition(ev.target, ev.target.name, ev.target.value);
        };
    };

    Plugin.prototype.removeFormLine = function(el) {
        var parent = el.parentNode;
        if (parent.children.length > 1) {
            this._removeCondition(el, el.getAttribute('data-num'));
            
            parent.removeChild(el);
            resetNums(parent);
        }
    };

    Plugin.prototype.deleteRow = function(el) {
        var ul = this._config('content');
        if (ul.children.length > 1) {
            this._data.remove(el.getAttribute('data-id'));
            ul.removeChild(el);
        }
    };

    return function (sel, args) {
        var p = []; // Save reference
        utils.foreach(document.querySelectorAll(sel), function (el) {
            p.push(new Plugin(el, args));
        });

        return (p.length === 1) ? p[0] : p;
    };
}));