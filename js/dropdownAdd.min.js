/*
  DropdownAdd
  Version: 1.0

  Albert Cansado Sola
  @albertcansado
*/
var DropdownAdd = (function () {

	"use strict";

	function classReg( className ) {
        return new RegExp("(^|\\s+)" + className + "(\\s+|$)");
    }

	var utils = {
		// Class
        hasClass: function(elem, c) {
            return classReg(c).test(elem.className);
        },
        addClass: function(elem, c) {
            if ( !utils.hasClass( elem, c ) ) {
                elem.className = elem.className + ' ' + c;
            }
        },
        removeClass: function(elem, c) {
            elem.className = elem.className.replace( classReg( c ), ' ' );
        },
        toggleClass: function(elem, c) {
            var fn = utils.hasClass( elem, c ) ? utils.removeClass : utils.addClass;
            fn( elem, c );
        },
		extend: function (obj) {
			if (!this.isObject(obj)) {
				return obj;
			}
			var source, prop;
			for (var i = 1, length = arguments.length; i < length; i++) {
				source = arguments[i];
				for (prop in source) {
					obj[prop] = source[prop];
				}
			}
			return obj;
		},
		insert: function(el, foo, isHtml) {
            isHtml = !utils.isUndefined(isHtml) ? Boolean(isHtml) : true;
            if (utils.isElement(foo)) {
                el.appendChild(foo);
            } else {
                el[isHtml ? 'innerHTML' : 'textContent'] = foo.toString();
            }
            return el;
        },
		value: function(el, val) {
            if (!utils.isUndefined(val)) {
                if (utils.equalTag(el, 'input')) {
                    el.value = val;
                } else {
                    utils.insert(el, val);
                }
            }
            if (utils.equalTag(el, 'input')) {
                return el.value;
            } else if (utils.isElement(el)) {
                return el.innerHTML;
            }

            return el;
        },
		isUndefined: function (foo) {
			return typeof foo === 'undefined';
		},
		isNull: function (foo) {
			return Boolean(foo === null);
		},
		isEmpty: function (str) {
			return (!str || str.length === 0);
		},
		isElement: function (foo) {
			return foo instanceof Element;
		},
		isNodeList: function(foo) {
            // Work in IE??
            return (!utils.isUndefined(foo.length) && !utils.isUndefined(foo.item));
        },
		isBoolean: function (foo) {
			return typeof foo === 'boolean';
		},
		isFunction: function (foo) {
			return typeof foo === 'function';
		},
		isObject: function (obj) {
			var type = typeof obj;
			return type === 'function' || type === 'object' && !! obj;
		},
		equalTag: function (el, tagName) {
			try {
				return el.tagName.toLowerCase() === tagName.toString();
			} catch (err) {
				return false;
			}
		},
		foreach: function (el, callback) {
            if (utils.isNodeList(el)) {
                [].slice.call(el).forEach(callback);
            }
        },
	    get: function(url, callback) {
	    	var xhReq = new XMLHttpRequest();
	    	xhReq.open('GET', url, true);

	    	xhReq.onreadystatechange = function() {
	    		if (xhReq.readyState === 4 && xhReq.status === 200) {
			    	callback(xhReq);
			    }
			}

			xhReq.send();
	    }
	};

	var defaultOptions = {
		selector: '.js-dropdown-add',
		btns: [],
		current: null,
		dialog: null,
		form: null,
		fieldInput: null,
		msg: null,
		prefix: '',
		text: {
			add: 'Add',
			cancel: 'Cancel',
			name: 'Name',
			key: 'Key',
			show: 'Show Key',
			hide: 'Hide Key',
			addOption: 'Add new option to %s'
		}
	};

	var Dropdown = function () {
		this.options = utils.extend({}, defaultOptions, arguments[0]);

		this.options.btns = document.querySelectorAll(this.options.selector);

		this.init();
	};

	Dropdown.prototype._initDialog = function() {
		var _this = this,
			dialog = document.createElement('div');

		dialog.className = 'js-dwnAdd-modal';
		dialog.innerHTML = '<div class="dropdown__msg js-dropdown-msg is-hidden"></div><form class="dropdown__add-form"><div class="input"><label class="input__label">' + _this.options.text.name + '</label><input type="text" name="n" class="input__field"  /></div><div class="input is-hidden js-dropdown-key"><label class="input__label">' + _this.options.text.key + '</label><input type="text" name="k" class="input__field" /></div><span class="dropdown__add-showhide js-dropdown-showhide" data-hide="' + _this.options.text.hide + '" data-show="' + _this.options.text.show + '">' + _this.options.text.show + '</span><input type="hidden" name="f" class="js-dropdown-field" /></form>';

		this.options.dialog = $(dialog).dialog({
			autoOpen: false,
			modal: true,
			buttons: [{
				text: _this.options.text.add,
				icons: {
					primary: 'ui-icon-disk'
				},
				click: _this._onSave.bind(_this)
			}, {
				text: _this.options.text.cancel,
				click: function () {
					_this.options.dialog.dialog("close");
				}
			}],
			open: function () {
				utils.value(_this.options.fieldInput, _this.options.current.getAttribute('data-field'));
			},
			close: function () {
				_this.options.form.reset();
				utils.value(_this.options.fieldInput, '');
				_this.options.current = null;
				_this._hideMsg();
			}
		});

		var showHide = dialog.querySelector('.js-dropdown-showhide'),
			keyInput = dialog.querySelector('.js-dropdown-key');

		this.options.form = dialog.querySelector('.dropdown__add-form');
		this.options.fieldInput = dialog.querySelector('.js-dropdown-field');
		this.options.msg = dialog.querySelector('.js-dropdown-msg');

		showHide.onclick = function (ev) {
			ev.preventDefault();

			utils.toggleClass(keyInput, 'is-hidden');
			utils.insert(showHide, utils.hasClass(showHide, 'is-show') ? _this.options.text.show : _this.options.text.hide);
			utils.toggleClass(showHide, 'is-show');

		};
	};

	Dropdown.prototype.init = function () {
		var _this = this;

		this._initDialog();

		utils.foreach(this.options.btns, function (el) {
			el.onclick = _this.onClick.bind(_this);
		});

		return true;
	};

	Dropdown.prototype.onClick = function (event) {
		event.preventDefault();

		this.options.current = event.currentTarget;

		this.options.dialog
			.dialog('option', 'title', this.options.current.getAttribute('data-fieldName'))
			.dialog('open');
	};

	Dropdown.prototype._onSave = function (event) {
		event.preventDefault();

		var valid = true,
			params = [''],
			_this = this;

		this._hideMsg();

		utils.foreach(this.options.form.elements, function (el) {

			if (el.name == 'n' && utils.isEmpty(el.value)) {
				utils.addClass(el, 'ui-state-error');
				valid = false;
			} else {
				utils.removeClass(el, 'ui-state-error');
			}

			params.push(_this.options.prefix + el.name + '=' + encodeURIComponent(el.value));
		});

		if (!valid) {
			return;
		}

		utils.get(this.options.url + params.join('&'), this._onSuccess.bind(this));
	};

	Dropdown.prototype._doOption = function (value, text) {
		var opt = document.createElement('option');
		opt.value = value;
		opt.text = text;

		return opt;
	};

	Dropdown.prototype._showMsg = function(content, type) {
		var type = type || 'success';

		utils.insert(this.options.msg, content, false);
		utils.addClass(this.options.msg, 'dropdown__msg--' + type);
		utils.removeClass(this.options.msg, 'is-hidden');
	};

	Dropdown.prototype._hideMsg = function() {
		this.options.msg.className = 'dropdown__msg js-dropdown-msg is-hidden';
		utils.insert(this.options.msg, '', false);
	};

	Dropdown.prototype._onSuccess = function (xhReq) {
		var response = JSON.parse(xhReq.response);

		if (response.status == 'success') {
			var select = this.options.current.parentNode.querySelector('select');
			select.add(this._doOption(response.data.key, response.data.name));

			this.options.dialog.dialog('close');
		} else {
			this._showMsg(response.data.msg, 'error');
			//console.error('E', response);
		}
	};

	return Dropdown;
}());
