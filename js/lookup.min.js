/*
  Lookup
  Version: 1.0
  
  Albert Cansado Sola
  @albertcansado
*/
var Lookup = (function () {

	"use strict";
	
	var defaultOptions = {
		input: null,
        btn: null,
        lon: null,
        lan: null
	},

	utils = {
		extend: function (obj) {
			if (!this.isObject(obj)) {
				return obj;
			}
			var source, prop;
			for (var i = 1, length = arguments.length; i < length; i++) {
				source = arguments[i];
				for (prop in source) {
					obj[prop] = source[prop];
				}
			}
			return obj;
		},
		insert: function (el, foo) {
			el.innerHTML = '';
			if (this.isElement(foo)) {
				el.appendChild(foo);
			} else {
				el.innerHTML = foo.toString();
			}
			return el;
		},
		getValue: function (el) {
			if (!el || el.tagName.toLowerCase() !== 'input') {
				return '';
			}
			return el.value.toString().trim();
		},
		setValue: function (el, value) {
			if (!el || el.tagName.toLowerCase() !== 'input') {
				return '';
			}
			el.value = value;
			return el;
		},
		isUndefined: function (foo) {
			return typeof foo === 'undefined';
		},
		isNull: function (foo) {
			return Boolean(foo === null);
		},
		isEmpty: function (str) {
			return (!str || str.length === 0);
		},
		isElement: function (foo) {
			return foo instanceof Element;
		},
		isBoolean: function (foo) {
			return typeof foo === 'boolean';
		},
		isFunction: function (foo) {
			return typeof foo === 'function';
		},
		isObject: function (obj) {
			var type = typeof obj;
			return type === 'function' || type === 'object' && !! obj;
		},
		equalTag: function (el, tagName) {
			try {
				return el.tagName.toLowerCase() === tagName.toString();
			} catch (err) {
				return false;
			}
		},
		format: function (pattern) {
			if (arguments.length <= 1 || this.isUndefined(pattern)) {
				return false;
			}
			var text = pattern;
			for (var i = 1, j = arguments.length; i < j; i++) {
				var toFind = '%s' + i.toString();
				text = text.replace(toFind, encodeURIComponent(arguments[i]));
			}
			return text;
		},
		findParentElement: function (el, name) {
			if (this.isUndefined(el) || this.isEmpty(name)) {
				throw 'params are required';
			}
			var found = this.equalTag(el, name),
			limit = false,
			max = 5,
			num = 0;
			while (!found && !limit) {
				el = el.parentNode;
				found = this.equalTag(el, name);
				num++;
				limit = (num === max) ? true : false;
			}
			if (limit) {
				return false;
			}
			return el;
		},
	    get: function(url, callback) {
	    	var xhReq = new XMLHttpRequest();
	    	xhReq.open('GET', url, true);

	    	xhReq.onreadystatechange = function() {
	    		if (xhReq.readyState === 4 && xhReq.status === 200) {
			    	callback(xhReq);
			    }
			}

			xhReq.send();
	    }
	};

	var Lookup = function () {
		this.options = utils.extend({}, defaultOptions, arguments[0]);
		this.init();
	};

	Lookup.prototype.init = function () {
		if (this.options.btn) {
			this.options.btn.onclick = this.onClickSave.bind(this);
		}

		this.options.input.onchange = this.onChange.bind(this);

		return true;
	};

	Lookup.prototype._onSuccess = function (xhReq) {
		var response = JSON.parse(xhReq.response);

		utils.setValue(this.options.lon, response.lon);
		utils.setValue(this.options.lat, response.lat);
	};

	Lookup.prototype.onClickSave = function (event) {
		event.preventDefault();

		var input = utils.getValue(this.options.input);
		if (utils.isEmpty(input)) {
			return;
		}

		utils.get(this.options.url + input, this._onSuccess.bind(this));
	};

	Lookup.prototype.onChange = function (event) {
		var inputVal = utils.getValue(this.options.input);
		if (utils.isEmpty(inputVal)) {
			utils.setValue(this.options.lon, '');
			utils.setValue(this.options.lat, '');
		}
	}
	
	return Lookup;
}());